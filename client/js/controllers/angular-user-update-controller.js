app.controller('userUpdateController', ['$scope', 'userFactory', 'userMessages', '$location', '$routeParams', function($scope, userFactory, userMessages, $location, $routeParams) {
    /*
    Sets up `userUpdateController` to handle User Account update page actions:

    Dependencies:
    - `$scope` - Angular scope object.
    - `userFactory` - Angular factory which handles User API requests.
    - `userMessages` - Angular service which handles user alert messages.
    - `$location` - Location provider service which gives us access to our application's URLs.
    - `$routeParams` - Angular service which allows you to retreive route parameters.

    Notes: This controller is used when viewing the User Account page and when performing any user update actions (ie, a username, email, or password update).
    */

    //----------------------------------//
    //-------- CALLBACK FUNCTIONS ------//
    //----------------------------------//
    /*
    The callback functions below only runs if one of the $scope methods below utilizes a factory method. The callback is sent to the factory, and will run after the factory receives a response from the server API. Please see individual callback functions for how each work.
    */
    var cb = {
        user: function(foundUser) {
            /*
            Runs after `$scope.getUser()` function completes -- ensures route URL matches username and assigns `$scope.user` to `foundUser`.

            Parameters:
            - `foundUser` - User object retrieved from API request.

            Development Note: May wish to add authentication logic here, checking for `authStatus` value. Currently this is done in the `navController` and is not secure. Will update this later.
            */

            // If URL username does not match session username, redirect to appropriate account URL:
            if (foundUser.user.username != $routeParams.username ) {
                console.log("Route paramter for username does not match logged in session...redirecting...");
                // Redirect to correct user dashboard:
                $location.url('/account/' + foundUser.user.username);
            }
            // Set `$scope.user` to User recieved from API request:
            $scope.accountName = foundUser.user.username;
            $scope.user = foundUser.user;
            // Delete user password hash for security:
            delete $scope.user.password;
            // Update any alert messages by getting all current alerts (new alerts may have been generated by API request):
            $scope.successAlerts = userMessages.getAlerts();
        },
        update: function(validated) {
            /*
            Runs after `$scope.updateUser()` function completes -- updates alerts and gets currently logged in User.

            Parameters:
            - `validated` - Object returned from API request containing a `messages` object, which contains any success messages.

            Notes: This function clears any existing alerts and generates new alerts if they were returned from our API request. `$scope.getUser()` runs after success messages are generated. Because currently an account is viewed by the url, `account/{{username}}`, our `getUser()` function will ensure if the username was updated, that the appropriate URL is redirected to (ie, `account/{{newUsername}}`).
            */

            // Clear any existing alerts from last time:
            userMessages.clearAlerts();
            // Check if any success messages sent, if so, iterate through the object and generate messages using `userMessages` service:
            if (Object.keys(validated.messages).length > 0) {
                console.log("Messages found.");

                // Send each message to the `userMessages` service to be added as an alert:
                for (var key in validated.messages) {
                    if (validated.messages.hasOwnProperty(key)) {
                        console.log(validated.messages[key]);
                        userMessages.addAlert({ type: 'success', hdr: validated.messages[key].hdr, msg: validated.messages[key].msg });
                    }
                }
            }
            // Run getUser() to fetch updated User and to check account URL path:
            $scope.getUser();
        },
        updateError: function(err) {
            /*
            Runs if errors are returned to the factory after an API request attempt to update a user.

            Parameters:
            - `err` - Object containing any errors generated by update attempt; each error is its own property with a corresponding value.
            */

            console.log('Errors returned from server when trying to Update User:', err);
            $scope.updateErrors = {}; // resets errors if any already existing
            userMessages.clearAlerts(); // resets any success messages existing
            // Set `$scope.updateErrors` to returned errors object from API request:
            $scope.updateErrors = err;
        },
    };

    //---------------------------------//
    //-------- PAGE LOAD ACTIONS ------//
    //---------------------------------//

    $scope.getUser = function() {
        /*
        Gets a currently logged in User.
        */

        console.log("Getting currently logged in user...");
        // Factory method to authenticate and retrieve user, passing the `cb.user` callback function from callbacks above to be run upon completion:
        userFactory.auth(cb.user);
    };

    // Run getUser() on page load:
    $scope.getUser();

    //----------------------------//
    //-------- FORM ACTIONS ------//
    //----------------------------//

    $scope.updateUser = function() {
        /*
        Updates a User by calling upon factory methods and performing validations; If the update is successful, `cb.update()` will run, otherwise, `cb.updateError()` will run passing along any errors.
        */

        console.log("Updating user...");
        console.log("Data submitted:", $scope.user);
        // Reset any on-page alerts or errors for new Update attempt:
        $scope.successAlerts = [];
        $scope.updateErrors = {};
        // Call `update()` factory method, passing along `cb.update` (if successful) or `cb.updateError` (which runs if unsuccessful).
        userFactory.update($scope.user, cb.update, cb.updateError);
    };

    $scope.cancel = function() {
        /*
        Cancels a User update by redirecting to the dashboard.
        */

        console.log("Cancelling user account update...");
        $location.url('/dashboard');
    };

    //----------------------------------//
    //------- ANGULAR UI ALERTS  -------//
    //----------------------------------//

    $scope.closeSuccessAlert = function(index) {
        /*
        Close a success alert.

        Parameters:
        - `index` - Index value of success alert to be removed.
        */

        // Remove alert from $scope:
        $scope.successAlerts.splice(index, 1);
        // Runs service to remove alert from alerts array within service:
        userMessages.removeAlert(index);
    };
}]);
